{"ast":null,"code":"import sleep from \"../utils/sleep\";\nimport getRandomId from \"../utils/get-random-id\";\nimport createAction from \"../utils/create-action\";\nimport { SONG_DELAY_TIME, REDUCED_DELAY_TIME } from \"../constants\";\nexport const START_GAME = \"START_GAME\";\nexport const START_SONG = \"START_SONG\";\nexport const FINISH_SONG = \"FINISH_SONG\";\nexport const LIGHTEN_PAD = \"LIGHTEN_PAD\";\nexport const LIGHTEN_OFF_PAD = \"LIGHTEN_OFF_PAD\";\nexport const GUESS_COLOR = \"GUESS_COLOR\";\nexport const NEXT_LEVEL = \"NEXT_LEVEL\";\nconst start = createAction(START_GAME);\nconst next = createAction(NEXT_LEVEL);\n\nconst startGame = payload => start({\n  next: getRandomId()\n});\n\nconst nextLevel = payload => next({\n  next: getRandomId()\n});\n\nconst guessColor = createAction(GUESS_COLOR);\nconst startSong = createAction(START_SONG);\nconst finishSong = createAction(FINISH_SONG);\nconst lightenPad = createAction(LIGHTEN_PAD);\nconst lightenOffPad = createAction(LIGHTEN_OFF_PAD);\n\nconst sing = payload => async (dispatch, getState) => {\n  try {\n    dispatch(startSong());\n    const {\n      match\n    } = getState();\n\n    for (let i = 0; i <= match.all.length - 1; i++) {\n      const id = match.all[i];\n      dispatch(lightenPad({\n        id\n      }));\n      await sleep(SONG_DELAY_TIME);\n      dispatch(lightenOffPad());\n      await sleep(SONG_DELAY_TIME);\n    }\n\n    dispatch(finishSong());\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nconst guess = ({\n  succeeded,\n  id\n}) => async (dispatch, getState) => {\n  try {\n    dispatch(guessColor({\n      succeeded,\n      id\n    }));\n    dispatch(startSong());\n    dispatch(lightenPad({\n      id\n    }));\n    await sleep(REDUCED_DELAY_TIME);\n    dispatch(lightenOffPad());\n    await sleep(REDUCED_DELAY_TIME);\n    dispatch(finishSong());\n    const {\n      match\n    } = getState();\n    const {\n      all,\n      guessed\n    } = match;\n    const done = all.length === guessed.length && succeeded;\n    return new Promise(r => r({\n      done\n    }));\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nexport const actionCreators = {\n  startSong,\n  startGame,\n  finishSong,\n  lightenPad,\n  lightenOffPad,\n  nextLevel,\n  guessColor,\n  guess,\n  sing\n};","map":{"version":3,"sources":["/Users/mithilproof/Oleic/github/simon-says/src/actions/game.js"],"names":["sleep","getRandomId","createAction","SONG_DELAY_TIME","REDUCED_DELAY_TIME","START_GAME","START_SONG","FINISH_SONG","LIGHTEN_PAD","LIGHTEN_OFF_PAD","GUESS_COLOR","NEXT_LEVEL","start","next","startGame","payload","nextLevel","guessColor","startSong","finishSong","lightenPad","lightenOffPad","sing","dispatch","getState","match","i","all","length","id","e","console","error","guess","succeeded","guessed","done","Promise","r","actionCreators"],"mappings":"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","sourcesContent":["import sleep from \"../utils/sleep\";\nimport getRandomId from \"../utils/get-random-id\";\nimport createAction from \"../utils/create-action\";\nimport { SONG_DELAY_TIME, REDUCED_DELAY_TIME } from \"../constants\";\n\nexport const START_GAME = \"START_GAME\";\nexport const START_SONG = \"START_SONG\";\nexport const FINISH_SONG = \"FINISH_SONG\";\nexport const LIGHTEN_PAD = \"LIGHTEN_PAD\";\nexport const LIGHTEN_OFF_PAD = \"LIGHTEN_OFF_PAD\";\nexport const GUESS_COLOR = \"GUESS_COLOR\";\nexport const NEXT_LEVEL = \"NEXT_LEVEL\";\n\nconst start = createAction(START_GAME);\nconst next = createAction(NEXT_LEVEL);\n\nconst startGame = (payload) => start({ next: getRandomId() });\nconst nextLevel = (payload) => next({ next: getRandomId() });\n\nconst guessColor = createAction(GUESS_COLOR);\nconst startSong = createAction(START_SONG);\nconst finishSong = createAction(FINISH_SONG);\nconst lightenPad = createAction(LIGHTEN_PAD);\nconst lightenOffPad = createAction(LIGHTEN_OFF_PAD);\n\nconst sing = (payload) => async (dispatch, getState) => {\n  try {\n    dispatch(startSong());\n    const { match } = getState();\n    for (let i = 0; i <= match.all.length - 1; i++) {\n      const id = match.all[i];\n      dispatch(lightenPad({ id }));\n      await sleep(SONG_DELAY_TIME);\n      dispatch(lightenOffPad());\n      await sleep(SONG_DELAY_TIME);\n    }\n\n    dispatch(finishSong());\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nconst guess = ({ succeeded, id }) => async (dispatch, getState) => {\n  try {\n    dispatch(guessColor({ succeeded, id }));\n    dispatch(startSong());\n    dispatch(lightenPad({ id }));\n    await sleep(REDUCED_DELAY_TIME);\n    dispatch(lightenOffPad());\n    await sleep(REDUCED_DELAY_TIME);\n    dispatch(finishSong());\n\n    const { match } = getState();\n    const { all, guessed } = match;\n    const done = all.length === guessed.length && succeeded;\n\n    return new Promise((r) => r({ done }));\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nexport const actionCreators = {\n  startSong,\n  startGame,\n  finishSong,\n  lightenPad,\n  lightenOffPad,\n  nextLevel,\n  guessColor,\n  guess,\n  sing,\n};\n"]},"metadata":{},"sourceType":"module"}