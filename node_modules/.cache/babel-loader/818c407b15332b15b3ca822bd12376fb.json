{"ast":null,"code":"import { START_GAME, GUESS_COLOR, NEXT_LEVEL } from '../actions/game';\nexport const initialState = {\n  guessed: [],\n  all: []\n};\nexport default function blocks(state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case START_GAME:\n      return {\n        guessed: [],\n        all: [payload.next]\n      };\n\n    case NEXT_LEVEL:\n      return {\n        guessed: [],\n        all: state.all.concat(payload.next)\n      };\n\n    case GUESS_COLOR:\n      return { ...state,\n        guessed: payload.succeeded ? state.guessed.concat(payload.id) : state.guessed\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/mithilproof/Oleic/github/simon-says/src/reducers/match.js"],"names":["START_GAME","GUESS_COLOR","NEXT_LEVEL","initialState","guessed","all","blocks","state","action","type","payload","next","concat","succeeded","id"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,WAArB,EAAkCC,UAAlC,QAAoD,iBAApD;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,OAAO,EAAE,EADiB;AAE1BC,EAAAA,GAAG,EAAE;AAFqB,CAArB;AAKP,eAAe,SAASC,MAAT,CAAgBC,KAAK,GAAGJ,YAAxB,EAAsCK,MAAtC,EAA8C;AAC3D,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAOC,IAAP;AACE,SAAKT,UAAL;AACE,aAAO;AACLI,QAAAA,OAAO,EAAE,EADJ;AAELC,QAAAA,GAAG,EAAE,CACHK,OAAO,CAACC,IADL;AAFA,OAAP;;AAOF,SAAKT,UAAL;AACE,aAAO;AACLE,QAAAA,OAAO,EAAE,EADJ;AAELC,QAAAA,GAAG,EAAEE,KAAK,CAACF,GAAN,CAAUO,MAAV,CAAiBF,OAAO,CAACC,IAAzB;AAFA,OAAP;;AAKF,SAAKV,WAAL;AACE,aAAO,EACN,GAAGM,KADG;AAELH,QAAAA,OAAO,EAAEM,OAAO,CAACG,SAAR,GAAoBN,KAAK,CAACH,OAAN,CAAcQ,MAAd,CAAqBF,OAAO,CAACI,EAA7B,CAApB,GAAuDP,KAAK,CAACH;AAFjE,OAAP;;AAKF;AACE,aAAOG,KAAP;AAtBJ;AAwBD","sourcesContent":["import { START_GAME, GUESS_COLOR, NEXT_LEVEL } from '../actions/game';\n\nexport const initialState = {\n  guessed: [],\n  all: [],\n}\n\nexport default function blocks(state = initialState, action) {\n  const { type, payload } = action;\n  switch(type) {\n    case START_GAME:\n      return {\n        guessed: [],\n        all: [\n          payload.next,\n        ],\n      }\n\n    case NEXT_LEVEL:\n      return {\n        guessed: [],\n        all: state.all.concat(payload.next),\n      }\n\n    case GUESS_COLOR:\n      return {\n       ...state,\n        guessed: payload.succeeded ? state.guessed.concat(payload.id) : state.guessed,\n      }\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}